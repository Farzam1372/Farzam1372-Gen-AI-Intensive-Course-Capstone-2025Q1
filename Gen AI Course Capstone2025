{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5826483,"sourceType":"datasetVersion","datasetId":3348682}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/farzamnazari/gen-ai-intensive-course-capstone-2025q1?scriptVersionId=234646313\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# üß† GenAI Supply Chain Assistant ‚Äì Executive Summary\n\nThis notebook presents a **Generative AI-powered assistant** for supply chain teams to improve decision-making around supplier delays, quality issues, and restocking needs.\n\nThe assistant combines:\n- ‚úÖ Document Understanding (simulated delivery records)\n- ‚úÖ Embedding Search with FAISS (Retrieval-Augmented Generation)\n- ‚úÖ LLM-Based Reasoning (Flan-T5) with business logic\n- ‚úÖ Hybrid Agent Logic (rules + language model)\n\nUsing these components, the assistant:\n1. Parses product and supplier data\n2. Flags risks like long lead times, low stock, or high defect rates\n3. Suggests actions such as ‚ÄúReorder‚Äù, ‚ÄúFlag for Delay‚Äù, or ‚ÄúMonitor‚Äù\n4. Summarizes decisions in a structured table and visualization\n\nThis solution can scale to live enterprise systems and integrate with dashboards or ERP software to support real-time supply chain optimization.\n","metadata":{}},{"cell_type":"code","source":"# Step 1: Load the Dataset\n# We're using the \"Supply Chain Dataset\" from Kaggle (by Amir Motefaker)\n# This dataset contains order dates, shipment status, lead times, etc\n\nimport numpy as np\nimport pandas as pd\n\n# Load the CSV file (replace the path with your uploaded Kaggle dataset)\ndf = pd.read_csv('/kaggle/input/supply-chain-dataset/supply_chain_data.csv')\n\n# Peek at the first few rows\ndf.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:01.77177Z","iopub.execute_input":"2025-04-18T12:07:01.772043Z","iopub.status.idle":"2025-04-18T12:07:01.83287Z","shell.execute_reply.started":"2025-04-18T12:07:01.772015Z","shell.execute_reply":"2025-04-18T12:07:01.831698Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"  Product type   SKU      Price  Availability  Number of products sold  \\\n0     haircare  SKU0  69.808006            55                      802   \n1     skincare  SKU1  14.843523            95                      736   \n2     haircare  SKU2  11.319683            34                        8   \n3     skincare  SKU3  61.163343            68                       83   \n4     skincare  SKU4   4.805496            26                      871   \n\n   Revenue generated Customer demographics  Stock levels  Lead times  \\\n0        8661.996792            Non-binary            58           7   \n1        7460.900065                Female            53          30   \n2        9577.749626               Unknown             1          10   \n3        7766.836426            Non-binary            23          13   \n4        2686.505152            Non-binary             5           3   \n\n   Order quantities  ...  Location Lead time  Production volumes  \\\n0                96  ...    Mumbai        29                 215   \n1                37  ...    Mumbai        23                 517   \n2                88  ...    Mumbai        12                 971   \n3                59  ...   Kolkata        24                 937   \n4                56  ...     Delhi         5                 414   \n\n  Manufacturing lead time Manufacturing costs  Inspection results  \\\n0                      29           46.279879             Pending   \n1                      30           33.616769             Pending   \n2                      27           30.688019             Pending   \n3                      18           35.624741                Fail   \n4                       3           92.065161                Fail   \n\n   Defect rates  Transportation modes   Routes       Costs  \n0      0.226410                  Road  Route B  187.752075  \n1      4.854068                  Road  Route B  503.065579  \n2      4.580593                   Air  Route C  141.920282  \n3      4.746649                  Rail  Route A  254.776159  \n4      3.145580                   Air  Route A  923.440632  \n\n[5 rows x 24 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Product type</th>\n      <th>SKU</th>\n      <th>Price</th>\n      <th>Availability</th>\n      <th>Number of products sold</th>\n      <th>Revenue generated</th>\n      <th>Customer demographics</th>\n      <th>Stock levels</th>\n      <th>Lead times</th>\n      <th>Order quantities</th>\n      <th>...</th>\n      <th>Location</th>\n      <th>Lead time</th>\n      <th>Production volumes</th>\n      <th>Manufacturing lead time</th>\n      <th>Manufacturing costs</th>\n      <th>Inspection results</th>\n      <th>Defect rates</th>\n      <th>Transportation modes</th>\n      <th>Routes</th>\n      <th>Costs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>haircare</td>\n      <td>SKU0</td>\n      <td>69.808006</td>\n      <td>55</td>\n      <td>802</td>\n      <td>8661.996792</td>\n      <td>Non-binary</td>\n      <td>58</td>\n      <td>7</td>\n      <td>96</td>\n      <td>...</td>\n      <td>Mumbai</td>\n      <td>29</td>\n      <td>215</td>\n      <td>29</td>\n      <td>46.279879</td>\n      <td>Pending</td>\n      <td>0.226410</td>\n      <td>Road</td>\n      <td>Route B</td>\n      <td>187.752075</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>skincare</td>\n      <td>SKU1</td>\n      <td>14.843523</td>\n      <td>95</td>\n      <td>736</td>\n      <td>7460.900065</td>\n      <td>Female</td>\n      <td>53</td>\n      <td>30</td>\n      <td>37</td>\n      <td>...</td>\n      <td>Mumbai</td>\n      <td>23</td>\n      <td>517</td>\n      <td>30</td>\n      <td>33.616769</td>\n      <td>Pending</td>\n      <td>4.854068</td>\n      <td>Road</td>\n      <td>Route B</td>\n      <td>503.065579</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>haircare</td>\n      <td>SKU2</td>\n      <td>11.319683</td>\n      <td>34</td>\n      <td>8</td>\n      <td>9577.749626</td>\n      <td>Unknown</td>\n      <td>1</td>\n      <td>10</td>\n      <td>88</td>\n      <td>...</td>\n      <td>Mumbai</td>\n      <td>12</td>\n      <td>971</td>\n      <td>27</td>\n      <td>30.688019</td>\n      <td>Pending</td>\n      <td>4.580593</td>\n      <td>Air</td>\n      <td>Route C</td>\n      <td>141.920282</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>skincare</td>\n      <td>SKU3</td>\n      <td>61.163343</td>\n      <td>68</td>\n      <td>83</td>\n      <td>7766.836426</td>\n      <td>Non-binary</td>\n      <td>23</td>\n      <td>13</td>\n      <td>59</td>\n      <td>...</td>\n      <td>Kolkata</td>\n      <td>24</td>\n      <td>937</td>\n      <td>18</td>\n      <td>35.624741</td>\n      <td>Fail</td>\n      <td>4.746649</td>\n      <td>Rail</td>\n      <td>Route A</td>\n      <td>254.776159</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>skincare</td>\n      <td>SKU4</td>\n      <td>4.805496</td>\n      <td>26</td>\n      <td>871</td>\n      <td>2686.505152</td>\n      <td>Non-binary</td>\n      <td>5</td>\n      <td>3</td>\n      <td>56</td>\n      <td>...</td>\n      <td>Delhi</td>\n      <td>5</td>\n      <td>414</td>\n      <td>3</td>\n      <td>92.065161</td>\n      <td>Fail</td>\n      <td>3.145580</td>\n      <td>Air</td>\n      <td>Route A</td>\n      <td>923.440632</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows √ó 24 columns</p>\n</div>"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"print(f\"Shape of the dataset: {df.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:01.833594Z","iopub.execute_input":"2025-04-18T12:07:01.833888Z","iopub.status.idle":"2025-04-18T12:07:01.839796Z","shell.execute_reply.started":"2025-04-18T12:07:01.833867Z","shell.execute_reply":"2025-04-18T12:07:01.83859Z"}},"outputs":[{"name":"stdout","text":"Shape of the dataset: (100, 24)\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"print(df.columns.tolist())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:01.840868Z","iopub.execute_input":"2025-04-18T12:07:01.84136Z","iopub.status.idle":"2025-04-18T12:07:01.861662Z","shell.execute_reply.started":"2025-04-18T12:07:01.841335Z","shell.execute_reply":"2025-04-18T12:07:01.860439Z"}},"outputs":[{"name":"stdout","text":"['Product type', 'SKU', 'Price', 'Availability', 'Number of products sold', 'Revenue generated', 'Customer demographics', 'Stock levels', 'Lead times', 'Order quantities', 'Shipping times', 'Shipping carriers', 'Shipping costs', 'Supplier name', 'Location', 'Lead time', 'Production volumes', 'Manufacturing lead time', 'Manufacturing costs', 'Inspection results', 'Defect rates', 'Transportation modes', 'Routes', 'Costs']\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"# Step 2: Simulate Document-Like Text from Data\n# We'll convert selected rows into natural language summaries (like delivery memos)\n\nsample_df = df.iloc[:50]  # Use first 50 rows\nsample_docs = []\n\nfor index, row in sample_df.iterrows():\n    text = (\n        f\"Product {row['Product type']} (SKU {row['SKU']}) from supplier {row['Supplier name']} \"\n        f\"has a lead time of {row['Lead time']} days. It is currently priced at {row['Price']} and \"\n        f\"shipped via {row['Transportation modes']} on route {row['Routes']}. \"\n        f\"Current stock level is {row['Stock levels']} units. \"\n        f\"Reported defect rate is {row['Defect rates']}%.\"\n    )\n    sample_docs.append(text)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:01.862903Z","iopub.execute_input":"2025-04-18T12:07:01.863289Z","iopub.status.idle":"2025-04-18T12:07:01.910732Z","shell.execute_reply.started":"2025-04-18T12:07:01.86323Z","shell.execute_reply":"2025-04-18T12:07:01.909796Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"# ‚úÖ Step 3: Create Embeddings for Documents\n# We'll use the all-MiniLM model (small, fast, and accurate for embeddings)\nfrom sentence_transformers import SentenceTransformer\n\n# Load the model\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\n\n# Create embeddings for your 50 document-style logistics texts\ndoc_embeddings = model.encode(sample_docs, convert_to_numpy=True)\n\n# Let's confirm the size of embeddings\nprint(\"Embedding shape:\", doc_embeddings.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:01.912141Z","iopub.execute_input":"2025-04-18T12:07:01.912919Z","iopub.status.idle":"2025-04-18T12:07:04.146302Z","shell.execute_reply.started":"2025-04-18T12:07:01.912881Z","shell.execute_reply":"2025-04-18T12:07:04.145041Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0bbd40e88334431daefea6bb4965a9f5"}},"metadata":{}},{"name":"stdout","text":"Embedding shape: (50, 384)\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"!pip install faiss-cpu -q","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:04.148938Z","iopub.execute_input":"2025-04-18T12:07:04.149308Z","iopub.status.idle":"2025-04-18T12:07:08.039451Z","shell.execute_reply.started":"2025-04-18T12:07:04.149257Z","shell.execute_reply":"2025-04-18T12:07:08.037952Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"# ‚úÖ Step 4: Store Embeddings in a FAISS Vector Index\nimport faiss  \n\nembedding_dim = doc_embeddings.shape[1]  \nindex = faiss.IndexFlatL2(embedding_dim)  \nindex.add(doc_embeddings)  \n\nprint(f\"Stored {index.ntotal} documents in vector store.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:08.041024Z","iopub.execute_input":"2025-04-18T12:07:08.041442Z","iopub.status.idle":"2025-04-18T12:07:08.050148Z","shell.execute_reply.started":"2025-04-18T12:07:08.041405Z","shell.execute_reply":"2025-04-18T12:07:08.048769Z"}},"outputs":[{"name":"stdout","text":"Stored 50 documents in vector store.\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"# ‚úÖ Step 5: Sample Query and Search\nquery = \"Which products have high defect rates or long lead times?\"\nquery_embedding = model.encode([query], convert_to_numpy=True)\n\n# Search top 3 most relevant documents\nk = 3\n_, indices = index.search(query_embedding, k)\n\n# Show matched documents\nprint(\"üìÑ Top matching documents:\")\nfor idx in indices[0]:\n    print(\"-\", sample_docs[idx])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:08.051541Z","iopub.execute_input":"2025-04-18T12:07:08.051921Z","iopub.status.idle":"2025-04-18T12:07:08.126978Z","shell.execute_reply.started":"2025-04-18T12:07:08.051892Z","shell.execute_reply":"2025-04-18T12:07:08.126072Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"518b6ab95f8c420a9357b4641b3df490"}},"metadata":{}},{"name":"stdout","text":"üìÑ Top matching documents:\n- Product cosmetics (SKU SKU27) from supplier Supplier 5 has a lead time of 25 days. It is currently priced at 92.55736081240202 and shipped via Sea on route Route B. Current stock level is 47 units. Reported defect rate is 2.864667837883373%.\n- Product cosmetics (SKU SKU29) from supplier Supplier 1 has a lead time of 16 days. It is currently priced at 63.44755918520733 and shipped via Road on route Route B. Current stock level is 45 units. Reported defect rate is 3.878098936588488%.\n- Product cosmetics (SKU SKU33) from supplier Supplier 5 has a lead time of 1 days. It is currently priced at 64.7954350001556 and shipped via Sea on route Route A. Current stock level is 4 units. Reported defect rate is 3.541046012250923%.\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"top_docs = [sample_docs[idx] for idx in indices[0]]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:08.12832Z","iopub.execute_input":"2025-04-18T12:07:08.128634Z","iopub.status.idle":"2025-04-18T12:07:08.134401Z","shell.execute_reply.started":"2025-04-18T12:07:08.128612Z","shell.execute_reply":"2025-04-18T12:07:08.133474Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"#Step 6: JSON Output Builder \nimport re\nimport json\n\ndef extract_value(pattern, text):\n    match = re.search(pattern, text)\n    return float(match.group(1)) if match else None\n\nrecommendations = []\n\nfor doc in top_docs:\n    sku_match = re.search(r'SKU (\\w+)', doc)\n    sku = sku_match.group(1) if sku_match else \"UNKNOWN\"\n    \n    stock = extract_value(r'stock level is (\\d+)', doc)\n    lead_time = extract_value(r'lead time of (\\d+)', doc)\n    defect = extract_value(r'defect rate is ([\\d.]+)%', doc)\n\n    action = []\n    reason_parts = []\n\n    # üéØ Match the query exactly\n    if defect is not None and defect > 3.5:\n        action.append(\"flag_for_defect\")\n        reason_parts.append(f\"Defect rate is high ({defect}%)\")\n\n    if lead_time is not None and lead_time > 20:\n        action.append(\"flag_for_delay\")\n        reason_parts.append(f\"Lead time is long ({lead_time} days)\")\n\n    recommendations.append({\n        \"sku\": sku,\n        \"actions\": action if action else [\"none\"],\n        \"reason\": \"; \".join(reason_parts) if reason_parts else \"No issues matching query\"\n    })\n\nprint(\"üì¶ Query-Aligned Structured Output:\")\nprint(json.dumps(recommendations, indent=2))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:08.135231Z","iopub.execute_input":"2025-04-18T12:07:08.135758Z","iopub.status.idle":"2025-04-18T12:07:08.154484Z","shell.execute_reply.started":"2025-04-18T12:07:08.135728Z","shell.execute_reply":"2025-04-18T12:07:08.153224Z"}},"outputs":[{"name":"stdout","text":"üì¶ Query-Aligned Structured Output:\n[\n  {\n    \"sku\": \"SKU27\",\n    \"actions\": [\n      \"flag_for_delay\"\n    ],\n    \"reason\": \"Lead time is long (25.0 days)\"\n  },\n  {\n    \"sku\": \"SKU29\",\n    \"actions\": [\n      \"flag_for_defect\"\n    ],\n    \"reason\": \"Defect rate is high (3.878098936588488%)\"\n  },\n  {\n    \"sku\": \"SKU33\",\n    \"actions\": [\n      \"flag_for_defect\"\n    ],\n    \"reason\": \"Defect rate is high (3.541046012250923%)\"\n  }\n]\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"#Step 7: Generate a Summary Using an LLM\nsummary = []\n\nfor rec in recommendations:\n    if \"none\" not in rec[\"actions\"]:\n        summary.append(f\"SKU {rec['sku']} ‚Üí {', '.join(rec['actions'])}: {rec['reason']}\")\n\nif summary:\n    print(\"üß† Summary Report:\")\n    for s in summary:\n        print(\"-\", s)\nelse:\n    print(\"No major issues found.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:08.155906Z","iopub.execute_input":"2025-04-18T12:07:08.156839Z","iopub.status.idle":"2025-04-18T12:07:08.17852Z","shell.execute_reply.started":"2025-04-18T12:07:08.15679Z","shell.execute_reply":"2025-04-18T12:07:08.177267Z"}},"outputs":[{"name":"stdout","text":"üß† Summary Report:\n- SKU SKU27 ‚Üí flag_for_delay: Lead time is long (25.0 days)\n- SKU SKU29 ‚Üí flag_for_defect: Defect rate is high (3.878098936588488%)\n- SKU SKU33 ‚Üí flag_for_defect: Defect rate is high (3.541046012250923%)\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"#Hybrid AI Agent\n# ‚úÖ Step 7: Install and Load Local LLM (Flan-T5)\n!pip install transformers sentencepiece -q\n\nfrom transformers import pipeline\n\n# Load Flan-T5 base (local lightweight model)\nllm = pipeline(\"text2text-generation\", model=\"google/flan-t5-base\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:08.179617Z","iopub.execute_input":"2025-04-18T12:07:08.180069Z","iopub.status.idle":"2025-04-18T12:07:12.72851Z","shell.execute_reply.started":"2025-04-18T12:07:08.18003Z","shell.execute_reply":"2025-04-18T12:07:12.727275Z"}},"outputs":[{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nDevice set to use cpu\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"def llm_recommendation(sku, stock, lead_time, defect):\n    prompt = f\"\"\"\nProduct SKU: {sku}\nStock: {stock}\nLead Time: {lead_time}\nDefect Rate: {defect}\n\nWhat should be done?\n\nChoose only ONE action from:\n- Reorder\n- Flag for Quality Audit\n- Flag for Delay Risk\n- Supplier Risk Monitoring\n- Suggest Alternate Supplier\n- Monitor\n\nAnswer format:\nAction: <your action>\nReason: <one short sentence why>\n\"\"\"\n\n    output = llm(prompt, max_new_tokens=80)[0]['generated_text'].strip()\n    return output","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:18:08.636275Z","iopub.execute_input":"2025-04-18T12:18:08.636622Z","iopub.status.idle":"2025-04-18T12:18:08.642024Z","shell.execute_reply.started":"2025-04-18T12:18:08.6366Z","shell.execute_reply":"2025-04-18T12:18:08.64107Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"print(\"ü§ñ Hybrid Agent Reasoning (with LLM):\")\n\nsummary_table = []  # This collects all results for the final table\n\nfor doc in top_docs:\n    print(\"\\nüìù Document:\")\n    print(doc)\n    \n    # Extract values from text\n    sku_match = re.search(r'SKU (\\w+)', doc)\n    sku = sku_match.group(1) if sku_match else \"UNKNOWN\"\n    \n    stock = extract_value(r'stock level is (\\d+)', doc)\n    lead_time = extract_value(r'lead time of (\\d+)', doc)\n    defect = extract_value(r'defect rate is ([\\d.]+)%', doc)\n\n    print(f\"ü§ñ Analyzing SKU: {sku}\")\n\n    # ‚úÖ Skip incomplete data\n    if stock is None or lead_time is None or defect is None:\n        print(\"‚ö†Ô∏è Missing values ‚Äì skipping...\")\n        continue\n\n    # Some smart messages\n    if lead_time > 20:\n        print(f\"‚ö†Ô∏è Flagged for delay (Lead time = {lead_time} days)\")\n    if defect > 3.5:\n        print(f\"üõë Flagged for quality (Defect rate = {defect}%)\")\n    if stock < 10:\n        print(f\"‚ö†Ô∏è Low stock: {stock} units\")\n\n    # Ask LLM\n    recommendation = llm_recommendation(sku, stock, lead_time, defect)\n    print(\"üí° LLM Suggestion:\")\n    print(recommendation)\n\n    # ‚úÖ Save the result\n    summary_table.append({\n        \"SKU\": sku,\n        \"Stock\": stock,\n        \"Lead Time\": lead_time,\n        \"Defect Rate\": defect,\n        \"LLM Suggestion\": recommendation\n    })\n\n# ‚úÖ Make a DataFrame to use for the chart\ndf_summary = pd.DataFrame(summary_table)\ndisplay(df_summary)\nprint(\"SKUs captured:\", df_summary[\"SKU\"].tolist())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:12.738646Z","iopub.execute_input":"2025-04-18T12:07:12.738917Z","iopub.status.idle":"2025-04-18T12:07:13.973818Z","shell.execute_reply.started":"2025-04-18T12:07:12.738891Z","shell.execute_reply":"2025-04-18T12:07:13.972794Z"}},"outputs":[{"name":"stdout","text":"ü§ñ Hybrid Agent Reasoning (with LLM):\n\nüìù Document:\nProduct cosmetics (SKU SKU27) from supplier Supplier 5 has a lead time of 25 days. It is currently priced at 92.55736081240202 and shipped via Sea on route Route B. Current stock level is 47 units. Reported defect rate is 2.864667837883373%.\nü§ñ Analyzing SKU: SKU27\n‚ö†Ô∏è Flagged for delay (Lead time = 25.0 days)\nüí° LLM Suggestion:\nReorder\n\nüìù Document:\nProduct cosmetics (SKU SKU29) from supplier Supplier 1 has a lead time of 16 days. It is currently priced at 63.44755918520733 and shipped via Road on route Route B. Current stock level is 45 units. Reported defect rate is 3.878098936588488%.\nü§ñ Analyzing SKU: SKU29\nüõë Flagged for quality (Defect rate = 3.878098936588488%)\nüí° LLM Suggestion:\nReorder\n\nüìù Document:\nProduct cosmetics (SKU SKU33) from supplier Supplier 5 has a lead time of 1 days. It is currently priced at 64.7954350001556 and shipped via Sea on route Route A. Current stock level is 4 units. Reported defect rate is 3.541046012250923%.\nü§ñ Analyzing SKU: SKU33\nüõë Flagged for quality (Defect rate = 3.541046012250923%)\n‚ö†Ô∏è Low stock: 4.0 units\nüí° LLM Suggestion:\nReorder\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"     SKU  Stock  Lead Time  Defect Rate LLM Suggestion\n0  SKU27   47.0       25.0     2.864668        Reorder\n1  SKU29   45.0       16.0     3.878099        Reorder\n2  SKU33    4.0        1.0     3.541046        Reorder","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SKU</th>\n      <th>Stock</th>\n      <th>Lead Time</th>\n      <th>Defect Rate</th>\n      <th>LLM Suggestion</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SKU27</td>\n      <td>47.0</td>\n      <td>25.0</td>\n      <td>2.864668</td>\n      <td>Reorder</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SKU29</td>\n      <td>45.0</td>\n      <td>16.0</td>\n      <td>3.878099</td>\n      <td>Reorder</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SKU33</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>3.541046</td>\n      <td>Reorder</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"SKUs captured: ['SKU27', 'SKU29', 'SKU33']\n","output_type":"stream"}],"execution_count":36},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.barplot(data=df_summary, x='SKU', y='Lead Time', hue='LLM Suggestion')\nplt.title(\"üß† LLM Suggestions by Lead Time\")\nplt.xlabel(\"SKU\")\nplt.ylabel(\"Lead Time (Days)\")\nplt.xticks(rotation=45)\nplt.legend(title=\"LLM Suggestion\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-18T12:07:13.974891Z","iopub.execute_input":"2025-04-18T12:07:13.975207Z","iopub.status.idle":"2025-04-18T12:07:14.044625Z","shell.execute_reply.started":"2025-04-18T12:07:13.975177Z","shell.execute_reply":"2025-04-18T12:07:14.042796Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/1171205112.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbarplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf_summary\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'SKU'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Lead Time'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'LLM Suggestion'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"üß† LLM Suggestions by Lead Time\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"SKU\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Lead Time (Days)\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"],"ename":"NameError","evalue":"name 'plt' is not defined","output_type":"error"}],"execution_count":37},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}