{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5826483,"sourceType":"datasetVersion","datasetId":3348682}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# üß† GenAI Supply Chain Assistant ‚Äì Executive Summary\n\nThis notebook presents a **Generative AI-powered assistant** for supply chain teams to improve decision-making around supplier delays, quality issues, and restocking needs.\n\nThe assistant combines:\n- ‚úÖ Document Understanding (simulated delivery records)\n- ‚úÖ Embedding Search with FAISS (Retrieval-Augmented Generation)\n- ‚úÖ LLM-Based Reasoning (Flan-T5) with business logic\n- ‚úÖ Hybrid Agent Logic (rules + language model)\n\nUsing these components, the assistant:\n1. Parses product and supplier data\n2. Flags risks like long lead times, low stock, or high defect rates\n3. Suggests actions such as ‚ÄúReorder‚Äù, ‚ÄúFlag for Delay‚Äù, or ‚ÄúMonitor‚Äù\n4. Summarizes decisions in a structured table and visualization\n\nThis solution can scale to live enterprise systems and integrate with dashboards or ERP software to support real-time supply chain optimization.\n","metadata":{}},{"cell_type":"code","source":"# ‚úÖ Step 1: Load the Dataset\n# We're using the \"Supply Chain Dataset\" from Kaggle (by Amir Motefaker)\n# This dataset contains order dates, shipment status, lead times, etc.\n\nimport pandas as pd\n\n# Load the CSV file (replace the path with your uploaded Kaggle dataset)\ndf = pd.read_csv('/kaggle/input/supply-chain-dataset/supply_chain_data.csv')\ndf.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-18T11:11:47.234391Z","iopub.execute_input":"2025-04-18T11:11:47.234668Z","iopub.status.idle":"2025-04-18T11:11:47.253094Z","shell.execute_reply.started":"2025-04-18T11:11:47.234649Z","shell.execute_reply":"2025-04-18T11:11:47.251858Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/3665281176.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Load the CSV file (replace the path with your uploaded Kaggle dataset)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/kaggle/input/supply-chain-dataset/supply_chain_data.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/kaggle/input/supply-chain-dataset/supply_chain_data.csv'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/kaggle/input/supply-chain-dataset/supply_chain_data.csv'","output_type":"error"}],"execution_count":3},{"cell_type":"code","source":"print(f\"Shape of the dataset: {df.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T16:59:16.122035Z","iopub.execute_input":"2025-04-16T16:59:16.122586Z","iopub.status.idle":"2025-04-16T16:59:16.126967Z","shell.execute_reply.started":"2025-04-16T16:59:16.122564Z","shell.execute_reply":"2025-04-16T16:59:16.126215Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(df.columns.tolist())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T17:01:39.710281Z","iopub.execute_input":"2025-04-16T17:01:39.710575Z","iopub.status.idle":"2025-04-16T17:01:39.715532Z","shell.execute_reply.started":"2025-04-16T17:01:39.710548Z","shell.execute_reply":"2025-04-16T17:01:39.714836Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ‚úÖ Step 2: Simulate Document-Like Text from Data\n# We'll convert selected rows into natural language summaries (like delivery memos)\n\nsample_df = df.iloc[:50]  # Use first 50 rows\nsample_docs = []\n\nfor index, row in sample_df.iterrows():\n    text = (\n        f\"Product {row['Product type']} (SKU {row['SKU']}) from supplier {row['Supplier name']} \"\n        f\"has a lead time of {row['Lead time']} days. It is currently priced at {row['Price']} and \"\n        f\"shipped via {row['Transportation modes']} on route {row['Routes']}. \"\n        f\"Current stock level is {row['Stock levels']} units. \"\n        f\"Reported defect rate is {row['Defect rates']}%.\"\n    )\n    sample_docs.append(text)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T17:02:45.396034Z","iopub.execute_input":"2025-04-16T17:02:45.396312Z","iopub.status.idle":"2025-04-16T17:02:45.405627Z","shell.execute_reply.started":"2025-04-16T17:02:45.396291Z","shell.execute_reply":"2025-04-16T17:02:45.404887Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ‚úÖ Step 3: Create Embeddings for Documents\n# We'll use the all-MiniLM model (small, fast, and accurate for embeddings)\nfrom sentence_transformers import SentenceTransformer\n\n# Load the model\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\n\n# Create embeddings for your 50 document-style logistics texts\ndoc_embeddings = model.encode(sample_docs, convert_to_numpy=True)\n\n# Let's confirm the size of embeddings\nprint(\"Embedding shape:\", doc_embeddings.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T17:05:30.144889Z","iopub.execute_input":"2025-04-16T17:05:30.145642Z","iopub.status.idle":"2025-04-16T17:06:07.043101Z","shell.execute_reply.started":"2025-04-16T17:05:30.145614Z","shell.execute_reply":"2025-04-16T17:06:07.042218Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install faiss-cpu -q\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T17:08:45.081760Z","iopub.execute_input":"2025-04-16T17:08:45.082134Z","iopub.status.idle":"2025-04-16T17:08:51.790146Z","shell.execute_reply.started":"2025-04-16T17:08:45.082112Z","shell.execute_reply":"2025-04-16T17:08:51.789018Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ‚úÖ Step 4: Store Embeddings in a FAISS Vector Index\nimport faiss  \n\nembedding_dim = doc_embeddings.shape[1]  \nindex = faiss.IndexFlatL2(embedding_dim)  \nindex.add(doc_embeddings)  \n\nprint(f\"Stored {index.ntotal} documents in vector store.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T17:08:54.804499Z","iopub.execute_input":"2025-04-16T17:08:54.805375Z","iopub.status.idle":"2025-04-16T17:08:54.848387Z","shell.execute_reply.started":"2025-04-16T17:08:54.805346Z","shell.execute_reply":"2025-04-16T17:08:54.847795Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ‚úÖ Step 5: Sample Query and Search\nquery = \"Which products have high defect rates or long lead times?\"\nquery_embedding = model.encode([query], convert_to_numpy=True)\n\n# Search top 3 most relevant documents\nk = 3\n_, indices = index.search(query_embedding, k)\n\n# Show matched documents\nprint(\"üìÑ Top matching documents:\")\nfor idx in indices[0]:\n    print(\"-\", sample_docs[idx])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T17:09:49.949686Z","iopub.execute_input":"2025-04-16T17:09:49.950367Z","iopub.status.idle":"2025-04-16T17:09:49.986980Z","shell.execute_reply.started":"2025-04-16T17:09:49.950342Z","shell.execute_reply":"2025-04-16T17:09:49.986131Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"top_docs = [sample_docs[idx] for idx in indices[0]]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T17:17:34.507183Z","iopub.execute_input":"2025-04-16T17:17:34.507464Z","iopub.status.idle":"2025-04-16T17:17:34.511869Z","shell.execute_reply.started":"2025-04-16T17:17:34.507449Z","shell.execute_reply":"2025-04-16T17:17:34.511085Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Step 6: JSON Output Builder \nimport re\nimport json\n\ndef extract_value(pattern, text):\n    match = re.search(pattern, text)\n    return float(match.group(1)) if match else None\n\nrecommendations = []\n\nfor doc in top_docs:\n    sku_match = re.search(r'SKU (\\w+)', doc)\n    sku = sku_match.group(1) if sku_match else \"UNKNOWN\"\n    \n    stock = extract_value(r'stock level is (\\d+)', doc)\n    lead_time = extract_value(r'lead time of (\\d+)', doc)\n    defect = extract_value(r'defect rate is ([\\d.]+)%', doc)\n\n    action = []\n    reason_parts = []\n\n    # üéØ Match the query exactly\n    if defect is not None and defect > 3.5:\n        action.append(\"flag_for_defect\")\n        reason_parts.append(f\"Defect rate is high ({defect}%)\")\n\n    if lead_time is not None and lead_time > 20:\n        action.append(\"flag_for_delay\")\n        reason_parts.append(f\"Lead time is long ({lead_time} days)\")\n\n    recommendations.append({\n        \"sku\": sku,\n        \"actions\": action if action else [\"none\"],\n        \"reason\": \"; \".join(reason_parts) if reason_parts else \"No issues matching query\"\n    })\n\nprint(\"üì¶ Query-Aligned Structured Output:\")\nprint(json.dumps(recommendations, indent=2))\n\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T17:41:05.214308Z","iopub.execute_input":"2025-04-16T17:41:05.215006Z","iopub.status.idle":"2025-04-16T17:41:05.222641Z","shell.execute_reply.started":"2025-04-16T17:41:05.214982Z","shell.execute_reply":"2025-04-16T17:41:05.221904Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Step 7: Generate a Summary Using an LLM\nsummary = []\n\nfor rec in recommendations:\n    if \"none\" not in rec[\"actions\"]:\n        summary.append(f\"SKU {rec['sku']} ‚Üí {', '.join(rec['actions'])}: {rec['reason']}\")\n\nif summary:\n    print(\"üß† Summary Report:\")\n    for s in summary:\n        print(\"-\", s)\nelse:\n    print(\"No major issues found.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T17:48:45.386048Z","iopub.execute_input":"2025-04-16T17:48:45.386849Z","iopub.status.idle":"2025-04-16T17:48:45.392056Z","shell.execute_reply.started":"2025-04-16T17:48:45.386795Z","shell.execute_reply":"2025-04-16T17:48:45.391068Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Hybrid AI Agent\n# ‚úÖ Step 7: Install and Load Local LLM (Flan-T5)\n!pip install transformers sentencepiece -q\n\nfrom transformers import pipeline\n\n# Load Flan-T5 base (local lightweight model)\nllm = pipeline(\"text2text-generation\", model=\"google/flan-t5-base\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T18:29:23.636752Z","iopub.execute_input":"2025-04-16T18:29:23.637489Z","iopub.status.idle":"2025-04-16T18:29:35.591670Z","shell.execute_reply.started":"2025-04-16T18:29:23.637466Z","shell.execute_reply":"2025-04-16T18:29:35.590875Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def llm_recommendation(sku, stock, lead_time, defect):\n    prompt = f\"\"\"\nProduct SKU: {sku}\nStock: {stock}\nLead Time: {lead_time}\nDefect Rate: {defect}\n\nWhat should be done?\n\nChoose only ONE action from:\n- Reorder\n- Flag for Quality Audit\n- Flag for Delay Risk\n- Supplier Risk Monitoring\n- Suggest Alternate Supplier\n- Monitor\n\nAnswer format:\nAction: <your action>\nReason: <one short sentence why>\n\"\"\"\n\n    output = llm(prompt, max_new_tokens=80)[0]['generated_text'].strip()\n    return output\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T19:53:24.043156Z","iopub.execute_input":"2025-04-16T19:53:24.043713Z","iopub.status.idle":"2025-04-16T19:53:24.047866Z","shell.execute_reply.started":"2025-04-16T19:53:24.043687Z","shell.execute_reply":"2025-04-16T19:53:24.047213Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"ü§ñ Hybrid Agent Reasoning (with LLM):\")\n\nsummary_table = []  # This collects all results for the final table\n\nfor doc in top_docs:\n    print(\"\\nüìù Document:\")\n    print(doc)\n    \n    # Extract values from text\n    sku_match = re.search(r'SKU (\\w+)', doc)\n    sku = sku_match.group(1) if sku_match else \"UNKNOWN\"\n    \n    stock = extract_value(r'stock level is (\\d+)', doc)\n    lead_time = extract_value(r'lead time of (\\d+)', doc)\n    defect = extract_value(r'defect rate is ([\\d.]+)%', doc)\n\n    print(f\"ü§ñ Analyzing SKU: {sku}\")\n\n    # ‚úÖ Skip incomplete data\n    if stock is None or lead_time is None or defect is None:\n        print(\"‚ö†Ô∏è Missing values ‚Äì skipping...\")\n        continue\n\n    # Some smart messages\n    if lead_time > 20:\n        print(f\"‚ö†Ô∏è Flagged for delay (Lead time = {lead_time} days)\")\n    if defect > 3.5:\n        print(f\"üõë Flagged for quality (Defect rate = {defect}%)\")\n    if stock < 10:\n        print(f\"‚ö†Ô∏è Low stock: {stock} units\")\n\n    # Ask LLM\n    recommendation = llm_recommendation(sku, stock, lead_time, defect)\n    print(\"üí° LLM Suggestion:\")\n    print(recommendation)\n\n    # ‚úÖ Save the result\n    summary_table.append({\n        \"SKU\": sku,\n        \"Stock\": stock,\n        \"Lead Time\": lead_time,\n        \"Defect Rate\": defect,\n        \"LLM Suggestion\": recommendation\n    })\n\n# ‚úÖ Make a DataFrame to use for the chart\ndf_summary = pd.DataFrame(summary_table)\ndisplay(df_summary)\nprint(\"SKUs captured:\", df_summary[\"SKU\"].tolist())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T19:53:25.289935Z","iopub.execute_input":"2025-04-16T19:53:25.290709Z","iopub.status.idle":"2025-04-16T19:53:26.308678Z","shell.execute_reply.started":"2025-04-16T19:53:25.290664Z","shell.execute_reply":"2025-04-16T19:53:26.308083Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.barplot(data=df_summary, x='SKU', y='Lead Time', hue='LLM Suggestion')\nplt.title(\"üß† LLM Suggestions by Lead Time\")\nplt.xlabel(\"SKU\")\nplt.ylabel(\"Lead Time (Days)\")\nplt.xticks(rotation=45)\nplt.legend(title=\"LLM Suggestion\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-16T19:55:23.613527Z","iopub.execute_input":"2025-04-16T19:55:23.613882Z","iopub.status.idle":"2025-04-16T19:55:23.781061Z","shell.execute_reply.started":"2025-04-16T19:55:23.613855Z","shell.execute_reply":"2025-04-16T19:55:23.780296Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}